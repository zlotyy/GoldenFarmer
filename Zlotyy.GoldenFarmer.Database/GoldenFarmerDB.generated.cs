//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace Zlotyy.GoldenFarmer.Database
{
	/// <summary>
	/// Database       : GoldenFarmer
	/// Data Source    : (LocalDb)\MSSQLLocalDB
	/// Server Version : 13.00.4001
	/// </summary>
	public partial class GoldenFarmerDB : LinqToDB.Data.DataConnection
	{
		public ITable<Customers>       Customers       { get { return this.GetTable<Customers>(); } }
		public ITable<Orders>          Orders          { get { return this.GetTable<Orders>(); } }
		public ITable<OrdersLProducts> OrdersLProducts { get { return this.GetTable<OrdersLProducts>(); } }
		public ITable<OrderStatus>     OrderStatus     { get { return this.GetTable<OrderStatus>(); } }
		public ITable<Products>        Products        { get { return this.GetTable<Products>(); } }

		public GoldenFarmerDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public GoldenFarmerDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table(Schema="dbo", Name="Customers")]
	public partial class Customers
	{
		[PrimaryKey, NotNull] public Guid   CustomerId { get; set; } // uniqueidentifier
		[Column,     NotNull] public string Login      { get; set; } // nvarchar(50)
		[Column,     NotNull] public string FullName   { get; set; } // nvarchar(100)
		[Column,     NotNull] public string Password   { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK_Orders_Customers_BackReference
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Orders> Orders { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Orders")]
	public partial class Orders
	{
		[PrimaryKey, NotNull    ] public Guid      OrderId      { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public Guid      CustomerId   { get; set; } // uniqueidentifier
		[Column,        Nullable] public DateTime? ExpectedDate { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  OrderDate    { get; set; } // datetime
		[Column,     NotNull    ] public bool      IsCompleted  { get; set; } // bit
		[Column,        Nullable] public string    Description  { get; set; } // nvarchar(500)

		#region Associations

		/// <summary>
		/// FK_Orders_Customers
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="CustomerId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Orders_Customers", BackReferenceName="Orders")]
		public Customers Customer { get; set; }

		/// <summary>
		/// FK_Orders_l_Products_Orders_BackReference
		/// </summary>
		[Association(ThisKey="OrderId", OtherKey="OrderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<OrdersLProducts> LProducts { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Orders_l_Products")]
	public partial class OrdersLProducts
	{
		[PrimaryKey(1), NotNull    ] public Guid   OrderId   { get; set; } // uniqueidentifier
		[PrimaryKey(2), NotNull    ] public int    ProductId { get; set; } // int
		[Column,        NotNull    ] public int    Amount    { get; set; } // int
		[Column,        NotNull    ] public string Unit      { get; set; } // nvarchar(50)
		[Column,        NotNull    ] public int    StatusId  { get; set; } // int
		[Column,        NotNull    ] public bool   IsDeleted { get; set; } // bit
		[Column,           Nullable] public string Message   { get; set; } // nvarchar(500)

		#region Associations

		/// <summary>
		/// FK_Orders_l_Products_Orders
		/// </summary>
		[Association(ThisKey="OrderId", OtherKey="OrderId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Orders_l_Products_Orders", BackReferenceName="LProducts")]
		public Orders Order { get; set; }

		/// <summary>
		/// FK_Orders_l_Products_Products
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="ProductId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Orders_l_Products_Products", BackReferenceName="Ordersls")]
		public Products Product { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="OrderStatus")]
	public partial class OrderStatus
	{
		[PrimaryKey, NotNull] public int    StatusId   { get; set; } // int
		[Column,     NotNull] public string StatusName { get; set; } // nvarchar(50)
		[Column,     NotNull] public string StatusCode { get; set; } // varchar(50)
	}

	[Table(Schema="dbo", Name="Products")]
	public partial class Products
	{
		[PrimaryKey, Identity   ] public int       ProductId     { get; set; } // int
		[Column,     NotNull    ] public string    Name          { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public bool      IsAvailable   { get; set; } // bit
		[Column,        Nullable] public string    Units         { get; set; } // nvarchar(100)
		[Column,     NotNull    ] public bool      SonnExpire    { get; set; } // bit
		[Column,     NotNull    ] public bool      SoonAvailable { get; set; } // bit
		[Column,        Nullable] public DateTime? AvailableDate { get; set; } // date

		#region Associations

		/// <summary>
		/// FK_Orders_l_Products_Products_BackReference
		/// </summary>
		[Association(ThisKey="ProductId", OtherKey="ProductId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<OrdersLProducts> Ordersls { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Customers Find(this ITable<Customers> table, Guid CustomerId)
		{
			return table.FirstOrDefault(t =>
				t.CustomerId == CustomerId);
		}

		public static Orders Find(this ITable<Orders> table, Guid OrderId)
		{
			return table.FirstOrDefault(t =>
				t.OrderId == OrderId);
		}

		public static OrdersLProducts Find(this ITable<OrdersLProducts> table, Guid OrderId, int ProductId)
		{
			return table.FirstOrDefault(t =>
				t.OrderId   == OrderId &&
				t.ProductId == ProductId);
		}

		public static OrderStatus Find(this ITable<OrderStatus> table, int StatusId)
		{
			return table.FirstOrDefault(t =>
				t.StatusId == StatusId);
		}

		public static Products Find(this ITable<Products> table, int ProductId)
		{
			return table.FirstOrDefault(t =>
				t.ProductId == ProductId);
		}
	}
}

#pragma warning restore 1591
